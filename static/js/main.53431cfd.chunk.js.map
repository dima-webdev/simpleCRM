{"version":3,"sources":["components/NavBar/NavBar.js","components/StaffCard/StaffCard.js","components/StaffList/StaffList.js","pages/HomePage/Home.js","pages/AboutPage/About.js","pages/StaffPage/Staff.js","pages/AccountPage/AccountPage.js","serviceWorker.js","index.js","components/FreeCRM/FreeCRM.js"],"names":["NavBar","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","className","to","Form","inline","FormControl","type","placeholder","Button","variant","StaffCard","name","email","location","picture","nat","Col","md","Card","Body","src","large","alt","Title","first","last","Subtitle","Text","city","Link","href","pathname","state","imgURL","lastName","StaffList","loadData","setState","isLoading","axios","get","then","response","console","log","staff","data","results","error","catch","this","Spinner","animation","role","Row","map","user","i","key","Component","Home","Container","fluid","About","Staff","AccountPage","props","ListGroup","as","Item","active","disabled","Jumbotron","span","offset","Header","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","path","exact","component","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.53431cfd.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Navbar, Nav, Form, FormControl, Button } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\n\r\n/**\r\n * The NavBar component function\r\n */\r\nconst NavBar = () => {\r\n    return (\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand>Личный кабинет LMS</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Link to=\"/\" className=\"nav-link\">Главная</Link>\r\n                    <Link to=\"/about\" className=\"nav-link\">О нас</Link>\r\n                    <Link to=\"/staff\" className=\"nav-link\">Сотрудники</Link>\r\n                </Nav>\r\n                <Form inline>\r\n                    <FormControl type=\"text\" placeholder=\"Поиск сотрудника...\" className=\"mr-sm-2\" />\r\n                    <Button variant=\"outline-success\">Найти</Button>\r\n                </Form>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default NavBar\r\n","import React from 'react'\r\nimport { Card, Col, Button } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\n\r\n/**\r\n * Represents a sraff item in card\r\n * @param {name} name - The name value\r\n * @param {email} email - The email value\r\n * @param {location} location - The location value\r\n * @param {picture} picture - The picture value \r\n * @param {nat} nat - The nationality value\r\n */\r\nexport default function StaffCard({name, email, location, picture, nat, id}) {\r\n    return (\r\n        <Col md={3}>\r\n            <Card className=\"mb-3\">\r\n                <Card.Body>\r\n                    <img src={picture.large} alt='' className=\"mb-4\" />\r\n                    <Card.Title>{name.first} {name.last}</Card.Title>\r\n                    <Card.Subtitle className=\"mb-2 text-muted\">{nat}</Card.Subtitle>\r\n                    <Card.Text>\r\n                        {location.city}\r\n                    </Card.Text>\r\n                    <Card.Link href={'mailto:' + email}>{email}</Card.Link><br/><br/>\r\n                     {/* Send values to common account page template */}\r\n                    <Link to={{\r\n                        pathname: `/accountpage/${name.first}`,\r\n                        state: {\r\n                            name: `${name.first}`,\r\n                            imgURL: `${picture.large}`,\r\n                            location: `${location.city}`,\r\n                            email: `${email}`,\r\n                            lastName: `${name.last}`\r\n                        }\r\n                    }}\r\n                    >\r\n                        <Button variant=\"primary\">Посмотреть профиль</Button>\r\n                    </Link>\r\n                </Card.Body>\r\n            </Card>\r\n        </Col>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport StaffCard from '../../components/StaffCard/StaffCard'\r\nimport { Row, Spinner } from 'react-bootstrap'\r\nimport '../../components/StaffList/StaffList.css'\r\n\r\n/** API link from randomuser.me */\r\nconst API = 'https://randomuser.me/api/?results=20'\r\n\r\n/** Class representing a list of staff members */\r\nclass StaffList extends Component {\r\n    constructor() {\r\n        super()\r\n        // Component have a state with 3 keys\r\n        this.state = {\r\n            isLoading: false,\r\n            staff: [],\r\n            error: null\r\n        }\r\n    }\r\n    /** Get data from API with axios */\r\n    loadData = () => {\r\n        this.setState({isLoading: true}) // Set state to 'true'\r\n        return axios\r\n                .get(API)\r\n                .then(response => {\r\n                    console.log(response)\r\n                    this.setState({\r\n                        isLoading: false,\r\n                        staff: response.data.results,\r\n                        error: null\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    console.error(\"error: \", error)\r\n                    this.setState({\r\n                        error: `${error}`,\r\n                        isLoading: false\r\n                    })\r\n                })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadData() // Run the get function \r\n    }\r\n\r\n    render() {\r\n        const {isLoading, error, staff} = this.state\r\n        /** If 'true' render 'Loading' text on the screen */\r\n        if (isLoading) {\r\n            return (\r\n                <Spinner animation=\"border\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </Spinner>\r\n            )\r\n        }\r\n        if (error) {\r\n            return (\r\n                <p>There was an error loading data...</p>\r\n            )\r\n        }\r\n        return (\r\n            <div className=\"staff-list\">\r\n                    <Row className=\"justify-content-md-center\">\r\n                    {\r\n                        staff.map((user, i) => \r\n                            <StaffCard key={i} {...user} />\r\n                        )\r\n                    }\r\n                    </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StaffList","import React from 'react'\r\nimport { Container } from 'react-bootstrap'\r\nimport StaffList from '../../components/StaffList/StaffList'\r\n// import FormQuant from '../../components/FormQuant/FormQuant'\r\n\r\n/** Home function representing home page content */\r\nexport default function Home() {\r\n    return (\r\n        <div className=\"content\">\r\n            <Container fluid>\r\n                {/* <FormQuant /> */}\r\n                <StaffList />\r\n            </Container>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\n\r\n/** About function representing about page content */\r\nexport default function About() {\r\n    return (\r\n        <div className=\"content\">\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col><h1>About Page</h1></Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\n\r\n/** Staff function representing staff page content  */\r\nconst Staff = () =>  {\r\n    return (\r\n        <div className=\"content\">\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col><h1>Staff Page</h1></Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Staff","import React, { Component } from 'react'\r\nimport { Container, Row, Col, Jumbotron, ListGroup, Card } from 'react-bootstrap'\r\n\r\n\r\nclass AccountPage extends Component {\r\n    render() {\r\n        const { name, imgURL, location, email, lastName } = this.props.location.state //take values from Link state\r\n        return (\r\n            <div className=\"content\">\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col md=\"3\">\r\n                            <div className=\"sidebar\">\r\n                                <ListGroup as=\"ul\">\r\n                                    <ListGroup.Item as=\"li\" active>Cras justo odio</ListGroup.Item>\r\n                                    <ListGroup.Item as=\"li\">Dapibus ac facilisis in</ListGroup.Item>\r\n                                    <ListGroup.Item as=\"li\" disabled>Morbi leo risus</ListGroup.Item>\r\n                                    <ListGroup.Item as=\"li\">Porta ac consectetur ac</ListGroup.Item>\r\n                                </ListGroup>\r\n                            </div>\r\n                        </Col>\r\n                        <Col md=\"9\">\r\n                            <div className=\"account-content\">\r\n                                <Jumbotron>\r\n                                    <h1>{name} {lastName}</h1>\r\n                                    <img src={imgURL} alt={name} className=\"account-page__image\" />\r\n                                    <Col md={{span: 6, offset:3}}>\r\n                                        <Card>\r\n                                            <Card.Header>Profile info</Card.Header>\r\n                                            <Card.Body>\r\n                                                <Card.Title>Location: {location}</Card.Title>\r\n                                                <Card.Text>\r\n                                                    Email: {email}\r\n                                                </Card.Text>\r\n                                            </Card.Body>\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Jumbotron>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AccountPage","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport FreeCRM from './components/FreeCRM/FreeCRM'\nimport * as serviceWorker from './serviceWorker'\nimport './index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<FreeCRM />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();","import React from 'react'\r\nimport '../../components/FreeCRM/FreeCRM.css'\r\nimport '../../pages/AccountPage/AccountPage.css'\r\nimport NavBar from '../../components/NavBar/NavBar'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport Home from '../../pages/HomePage/Home'\r\nimport About from '../../pages/AboutPage/About'\r\nimport Staff from '../../pages/StaffPage/Staff'\r\nimport AccountPage from '../../pages/AccountPage/AccountPage'\r\n\r\n/** The main app FreeCRM function */\r\nexport default function FreeCRM() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <NavBar />\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n        <Switch>\r\n          <Route path={'/'} exact component={Home} />\r\n          <Route path={'/about'} component={About} />\r\n          <Route path={'/staff'} component={Staff} />\r\n          <Route path={'/account'} component={AccountPage} />\r\n          <Route path='/:handle' component={AccountPage} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n"],"sourceRoot":""}